How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    It helps us to find the bug faster and find out what is the problem with our programm by comparing two versions of it. 

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    You can return to your previous versions and compare changes to find out what version is better. Aslo you can always correct your current mistakes by going one step back and using the previous version.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    When you do a commit manually you can choose the right time for it and avoid unnecessary ones. But it is a risk to forget to commit your changes and it will lead to unpleasant results.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    As git uses manual commits you can decide how to commit our progect - only one file or all the files. It is useful when you add one function and you changed some files for it, so now you can commit all the files instead of commiting it one after another.

How can you use the commands git log and git diff to view the history of files?

    Git log shows all the recent commits and what had changed in them. Git diff helps to compare two commits via their id to define what had changed in them.

How might using version control make you more confident to make changes that
could break something?

    
Now that you have your workspace set up, what do you want to try using Git for?

    Fill in your answer here